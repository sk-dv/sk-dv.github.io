{"ast":null,"code":"/**\n * This optional code is used to register a service worker.\n * register() is not called by default.\n * */ /**\n * This lets the app load faster on subsequent visits in production, and gives\n * it offline capabilities. However, it also means that developers (and users)\n * will only see deployed updates on subsequent visits to a page, after all the\n * existing tabs open on the page have been closed, since previously cached\n * resources are updated in the background.\n * */ /**\n * To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n * */var isLocalhost=Boolean(window.location.hostname==='localhost'||/** [::1] is the IPv6 localhost address. */window.location.hostname==='[::1]'||/** 127.0.0.0/8 are considered localhost for IPv4. */window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){/** The URL constructor is available in all browsers that support SW. */var publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){/**\n             * Our service worker won't work if PUBLIC_URL is on a different origin\n             * from what our page is served on. This might happen if a CDN is used to\n             * serve assets; see https://github.com/facebook/create-react-app/issues/2374\n             * */return;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){/** This is running on localhost. Let's check if a service worker still exists or not. */checkValidServiceWorker(swUrl,config);/**\n                 * Add some additional logging to localhost, pointing developers to the\n                 * service worker/PWA documentation.\n                 * */navigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{/** Is not localhost. Just register service worker */registerValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null)return;installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){/**\n                         * At this point, the updated precached content has been fetched,\n                         * but the previous service worker will still serve the older\n                         * content until all client tabs are closed.\n                         * */console.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');/** Execute callback */if(config&&config.onUpdate)config.onUpdate(registration);}else{/**\n                         * At this point, everything has been precached.\n                         * It's the perfect time to display a\n                         * \"Content is cached for offline use.\" message.\n                         * */console.log('Content is cached for offline use.');/** Execute callback */if(config&&config.onSuccess)config.onSuccess(registration);}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){/** Check if the service worker can be found. If it can't reload the page. */fetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){/** Ensure service worker exists, and that we really are getting a JS file. */var contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){/** No service worker found. Probably a different app. Reload the page. */navigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{/** Service worker found. Proceed as normal. */registerValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["/Users/skdv/Documents/Lifepost/sk-dv/src/utils/serviceWorker.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["/**\n * This optional code is used to register a service worker.\n * register() is not called by default.\n * */\n\n/**\n * This lets the app load faster on subsequent visits in production, and gives\n * it offline capabilities. However, it also means that developers (and users)\n * will only see deployed updates on subsequent visits to a page, after all the\n * existing tabs open on the page have been closed, since previously cached\n * resources are updated in the background.\n * */\n\n/**\n * To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n * */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    /** [::1] is the IPv6 localhost address. */\n    window.location.hostname === '[::1]' ||\n    /** 127.0.0.0/8 are considered localhost for IPv4. */\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\n        /** The URL constructor is available in all browsers that support SW. */\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        )\n\n        if (publicUrl.origin !== window.location.origin) {\n            /**\n             * Our service worker won't work if PUBLIC_URL is on a different origin\n             * from what our page is served on. This might happen if a CDN is used to\n             * serve assets; see https://github.com/facebook/create-react-app/issues/2374\n             * */\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                /** This is running on localhost. Let's check if a service worker still exists or not. */\n                checkValidServiceWorker(swUrl, config);\n\n                /**\n                 * Add some additional logging to localhost, pointing developers to the\n                 * service worker/PWA documentation.\n                 * */\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                /** Is not localhost. Just register service worker */\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker.register(swUrl).then((registration) => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing\n\n            if (installingWorker == null) return\n\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n\n                    if (navigator.serviceWorker.controller) {\n\n                        /**\n                         * At this point, the updated precached content has been fetched,\n                         * but the previous service worker will still serve the older\n                         * content until all client tabs are closed.\n                         * */\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                        );\n\n                        /** Execute callback */\n                        if (config && config.onUpdate) config.onUpdate(registration)\n\n                    } else {\n\n                        /**\n                         * At this point, everything has been precached.\n                         * It's the perfect time to display a\n                         * \"Content is cached for offline use.\" message.\n                         * */\n                        console.log('Content is cached for offline use.');\n\n                        /** Execute callback */\n                        if (config && config.onSuccess) config.onSuccess(registration)\n\n                    }\n\n                }\n            }\n        }\n    }).catch((error) => {\n        console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    /** Check if the service worker can be found. If it can't reload the page. */\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    }).then(response => {\n        /** Ensure service worker exists, and that we really are getting a JS file. */\n        const contentType = response.headers.get('content-type');\n        if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n            /** No service worker found. Probably a different app. Reload the page. */\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                })\n            })\n        } else {\n            /** Service worker found. Proceed as normal. */\n            registerValidSW(swUrl, config)\n        }\n    }).catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        )\n    })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        }).catch(error => {\n            console.error(error.message)\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}