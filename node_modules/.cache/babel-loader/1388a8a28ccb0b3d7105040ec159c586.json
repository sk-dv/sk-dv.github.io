{"ast":null,"code":"/**\n * This optional code is used to register a service worker.\n * register() is not called by default.\n * */\n\n/**\n * This lets the app load faster on subsequent visits in production, and gives\n * it offline capabilities. However, it also means that developers (and users)\n * will only see deployed updates on subsequent visits to a page, after all the\n * existing tabs open on the page have been closed, since previously cached\n * resources are updated in the background.\n * */\n\n/**\n * To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n * */\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n/** [::1] is the IPv6 localhost address. */\nwindow.location.hostname === '[::1]' ||\n/** 127.0.0.0/8 are considered localhost for IPv4. */\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    /** The URL constructor is available in all browsers that support SW. */\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      /**\n       * Our service worker won't work if PUBLIC_URL is on a different origin\n       * from what our page is served on. This might happen if a CDN is used to\n       * serve assets; see https://github.com/facebook/create-react-app/issues/2374\n       * */\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        /** This is running on localhost. Let's check if a service worker still exists or not. */\n        checkValidServiceWorker(swUrl, config);\n        /**\n         * Add some additional logging to localhost, pointing developers to the\n         * service worker/PWA documentation.\n         * */\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        /** Is not localhost. Just register service worker */\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) return;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            /**\n             * At this point, the updated precached content has been fetched,\n             * but the previous service worker will still serve the older\n             * content until all client tabs are closed.\n             * */\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n            /** Execute callback */\n\n            if (config && config.onUpdate) config.onUpdate(registration);\n          } else {\n            /**\n             * At this point, everything has been precached.\n             * It's the perfect time to display a\n             * \"Content is cached for offline use.\" message.\n             * */\n            console.log('Content is cached for offline use.');\n            /** Execute callback */\n\n            if (config && config.onSuccess) config.onSuccess(registration);\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  /** Check if the service worker can be found. If it can't reload the page. */\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    /** Ensure service worker exists, and that we really are getting a JS file. */\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      /** No service worker found. Probably a different app. Reload the page. */\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      /** Service worker found. Proceed as normal. */\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/skdv/Documents/Blog/sk-dv/src/utils/serviceWorker.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["/**\n * This optional code is used to register a service worker.\n * register() is not called by default.\n * */\n\n/**\n * This lets the app load faster on subsequent visits in production, and gives\n * it offline capabilities. However, it also means that developers (and users)\n * will only see deployed updates on subsequent visits to a page, after all the\n * existing tabs open on the page have been closed, since previously cached\n * resources are updated in the background.\n * */\n\n/**\n * To learn more about the benefits of this model and instructions on how to\n * opt-in, read https://bit.ly/CRA-PWA\n * */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    /** [::1] is the IPv6 localhost address. */\n    window.location.hostname === '[::1]' ||\n    /** 127.0.0.0/8 are considered localhost for IPv4. */\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\n        /** The URL constructor is available in all browsers that support SW. */\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        )\n\n        if (publicUrl.origin !== window.location.origin) {\n            /**\n             * Our service worker won't work if PUBLIC_URL is on a different origin\n             * from what our page is served on. This might happen if a CDN is used to\n             * serve assets; see https://github.com/facebook/create-react-app/issues/2374\n             * */\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                /** This is running on localhost. Let's check if a service worker still exists or not. */\n                checkValidServiceWorker(swUrl, config);\n\n                /**\n                 * Add some additional logging to localhost, pointing developers to the\n                 * service worker/PWA documentation.\n                 * */\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                /** Is not localhost. Just register service worker */\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker.register(swUrl).then((registration) => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing\n\n            if (installingWorker == null) return\n\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n\n                    if (navigator.serviceWorker.controller) {\n\n                        /**\n                         * At this point, the updated precached content has been fetched,\n                         * but the previous service worker will still serve the older\n                         * content until all client tabs are closed.\n                         * */\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                        );\n\n                        /** Execute callback */\n                        if (config && config.onUpdate) config.onUpdate(registration)\n\n                    } else {\n\n                        /**\n                         * At this point, everything has been precached.\n                         * It's the perfect time to display a\n                         * \"Content is cached for offline use.\" message.\n                         * */\n                        console.log('Content is cached for offline use.');\n\n                        /** Execute callback */\n                        if (config && config.onSuccess) config.onSuccess(registration)\n\n                    }\n\n                }\n            }\n        }\n    }).catch((error) => {\n        console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    /** Check if the service worker can be found. If it can't reload the page. */\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    }).then(response => {\n        /** Ensure service worker exists, and that we really are getting a JS file. */\n        const contentType = response.headers.get('content-type');\n        if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n            /** No service worker found. Probably a different app. Reload the page. */\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                })\n            })\n        } else {\n            /** Service worker found. Proceed as normal. */\n            registerValidSW(swUrl, config)\n        }\n    }).catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        )\n    })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        }).catch(error => {\n            console.error(error.message)\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}